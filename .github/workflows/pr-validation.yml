name: Pull Request Validation

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: nextjs-build
          path: .next/
          retention-days: 1

  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json,./coverage/lcov.info
          flags: pr-validation
          name: codecov-pr-${{ github.event.pull_request.number }}
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: coverage-report-pr-${{ github.event.pull_request.number }}
          path: coverage/
          retention-days: 3

      - name: Generate coverage summary
        run: |
          echo "### üìä Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR #${{ github.event.pull_request.number }}** - Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          npm run test:ci -- --silent --coverageReporters=text-summary 2>&1 | tail -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only, no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: birthday-planner:pr-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  pr-validation-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [lint, build, test, docker-build]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"

          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.docker-build.result }}" != "success" ]; then
            echo "‚ùå PR validation failed"
            exit 1
          fi

          echo "‚úÖ All PR validation checks passed"
